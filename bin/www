#!/usr/bin/env node

/**
 * Module dependencies.
 */
const iosMinicapServer = require('../ios_minicap_server/ios_minicap_server.js');

const app = require('../app');
const debug = require('debug')('zeroemp:server');
const http = require('http');
const path = require('path')
const net = require('net')

const WebSocketServer = require('ws').Server
const { BannerParser, FrameParser } = require('minicap') 


const runIosServer = new iosMinicapServer();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const wss = new WebSocketServer({server: server});

wss.on('connection', (ws) => {
  console.info('Got a client')

  const stream = net.connect({
    port: 12345
  })

  stream.on('error', (err) => {
    console.error(err)
    console.error('Be sure to run `ios-minicap --port 12345`')
    runIosServer.destroy()
    process.exit(1)
  })

  let bannerParsed = false
  const bannerParser = new BannerParser()
  const frameParser = new FrameParser()

  function onBannerAvailable (banner) {
    debug('banner', banner)
  }

  function onFrameAvailable (frame) {
      ws.send(frame.buffer, {
        binary: true
      })
  }

  function tryParse () {
    for (let chunk; (chunk = stream.read());) {
      do {
        if (!bannerParsed) {
          const result = bannerParser.parse(chunk)
          if (result.state === BannerParser.COMPLETE) {
            bannerParsed = true
            onBannerAvailable(result.take())
          }
          chunk = result.rest
        } else {
          const result = frameParser.parse(chunk)
          if (result.state === FrameParser.COMPLETE) {
            onFrameAvailable(result.take())
          }
          chunk = result.rest
        }
      } while (chunk.length)
    }
  }

  stream.on('readable', tryParse)
  tryParse()

  ws.on('close', () => {
    console.info('Lost a client')
    stream.destroy()
    runIosServer.destroy()
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  
  runIosServer.destroy()

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
